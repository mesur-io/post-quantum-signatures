const jwk = require('./jwk')
const jws = require('./jws')
const message = `Itâ€™s a dangerous business, Frodo, going out your door.`;
const msg = new TextEncoder().encode(message);

// (async ()=>{
//   console.log('sign and verify raw')
//   const {  publicKey,  privateKey } = await jwk.generate()
//   const sig1 = await jws.signRaw(msg, privateKey)
//   const ver1 = await jws.verifyRaw(sig1, publicKey)
//   const decoded = new TextDecoder().decode(ver1)
//   console.log(decoded === message)
// })()

// (async ()=>{
//   console.log('key conversions')
//   const { publicKey,  privateKey} = await jwk.generate()
//   const exported1 = jwk.exportPublicKeyJwk({ publicKey })
//   const imported1 = jwk.importJwk(exported1)
//   const exported2 = jwk.exportPublicKeyJwk({ publicKey: imported1 })
//   console.log(JSON.stringify(exported1) === JSON.stringify(exported2))

//   const exported3 = jwk.exportPrivateKeyJwk({ publicKey, privateKey })
//   const imported2 = jwk.importJwk(exported3)
//   const exported5 = jwk.exportPrivateKeyJwk({ publicKey: imported1, privateKey: imported2  })
//   console.log(JSON.stringify(exported3) === JSON.stringify(exported5))
// })()

// (async ()=>{
//   console.log('dilithium-crystals...')
//   const { publicKey,  privateKey} = await jwk.generate()
//   const { publicKeyJwk, privateKeyJwk } = await jwk.exportKeyPairJwk({ publicKey,  privateKey})
//   const jws1 = await jws.sign({
//     header: { 'kid': '123'},
//     payload: {
//       message
//     },
//     privateKeyJwk,
//   })
//   const { protectedHeader, payload } = await jws.verify({
//     jws: jws1,
//     publicKeyJwk
//   })
//   // console.log({protectedHeader, payload})
//   console.log(protectedHeader.alg === publicKeyJwk.alg)
//   console.log(payload.toString() === JSON.stringify({message}))
// })()

const dilithium = require('dilithium-crystals');

const fromHexString = (hexString) =>
    Uint8Array.from(hexString.match(/.{1,2}/g).map((byte) => parseInt(byte, 16)));

const toHexString = (bytes) =>
    bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '')

;(async () => {
    console.log('tests....');
    // const {publicKey, privateKey} = await dilithium.keyPair();
    // const message = new TextEncoder().encode('hello');
    // // const messageHex = toHexString(message);
    const messageHex = '68656c6c6f';

    //
    // const signature = await dilithium.sign(
    //     fromHexString(messageHex),
    //     fromHexString(toHexString(privateKey)),
    // );
    // const sigHex = toHexString(signature);
    // const pubKeyHex = toHexString(publicKey);
    const sigHex
    const pubKeyHex

    console.log('sig hex: \n', sigHex);
    console.log('pub key hex: ', pubKeyHex);
    const byteArray = [0x01, 0x02, 0x03, 0x04, 0x05];
    const uint8Array = new Uint8Array(byteArray);
    const verified = await dilithium.open(
        uint8Array,
        fromHexString(pubKeyHex),
    );
    console.log('verified: ', toHexString(verified) === messageHex);
})();
